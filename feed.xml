<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malav Bhavsar</title>
    <description>Senior Software Engineer at Square. I lead high-impact cross-organizational projects and engineering teams. Interested in Distributed Systems, Fintech, Blockchain and Machine Learning.</description>
    <link>http://malav.io//</link>
    <atom:link href="http://malav.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 18 Jan 2021 22:55:22 -0800</pubDate>
    <lastBuildDate>Mon, 18 Jan 2021 22:55:22 -0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>

      <item>
        <title>git hublog</title>
        <description>&lt;p&gt;Sneak peak of git hublog project!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/hublog1.gif&quot;&gt;
  &lt;img class=&quot;responsive-image&quot; src=&quot;/assets/hublog1.gif&quot; alt=&quot;&quot; srcset=&quot;            /assets/resized/hublog1-256x221.gif 256w,            /assets/resized/hublog1-340x294.gif 340w,            /assets/resized/hublog1-600x519.gif 600w,            /assets/resized/hublog1-640x553.gif 640w,    &quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am trying to build better and interactive git logs in command line using &lt;a href=&quot;https://github.com/chjj/blessed&quot;&gt;blessed&lt;/a&gt;. Inspiration has been github’s activity stream.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git hublog&lt;/code&gt; is a replacement for &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;. When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;git hublog&lt;/code&gt;, you get a TUI(Text User Interface) like in the GIF. From there, you could click on a cell representing a day and get commits merged on that day. You could also use standard git log filters interactively, so you could say &lt;code class=&quot;highlighter-rouge&quot;&gt;:--grep=PMP&lt;/code&gt; and filter only  commits related to apollo project on interactive activity stream.&lt;/p&gt;

&lt;p&gt;UPDATE: I have been chunking away at this. It looks and works like below&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/hublog2.gif&quot;&gt;
  &lt;img class=&quot;responsive-image&quot; src=&quot;/assets/hublog2.gif&quot; alt=&quot;&quot; srcset=&quot;            /assets/resized/hublog2-256x223.gif 256w,            /assets/resized/hublog2-340x297.gif 340w,            /assets/resized/hublog2-600x523.gif 600w,            /assets/resized/hublog2-640x558.gif 640w,    &quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Jul 2016 18:30:00 -0700</pubDate>
        <link>http://malav.io//2016/git-hublog/</link>
        <guid isPermaLink="true">http://malav.io//2016/git-hublog/</guid>

        <category>git</category>

        <category>node.js</category>

        <category>curses</category>

        <category>terminal</category>


      </item>

      <item>
        <title>RubyGem for Sentiment Analysis: Sentimentalizer</title>
        <description>&lt;p&gt;So, this month we had a Pittsburgh hackathon organized by facebook. I teamed up with Ruchir Patwa and made a simple web-app. It gets facebook status messages of one’s friends and predicts whether they are happy or sad by doing sentiment analysis. &lt;a href=&quot;https://github.com/malavbhavsar/Friends-mood&quot;&gt;Here&lt;/a&gt; is the github repo of the project.&lt;/p&gt;

&lt;p&gt;In the process, I made my first gem: &lt;a href=&quot;https://github.com/malavbhavsar/sentimentalizer&quot;&gt;sentimentalizer&lt;/a&gt;. It takes inspiration from a &lt;a href=&quot;https://github.com/kouphax/sentimentalizer/&quot;&gt;project&lt;/a&gt; by James Hughes.&lt;/p&gt;

&lt;p&gt;This was supposed to be a learning experience for me on how to make gems. So here it is: One can start with the &lt;a href=&quot;http://guides.rubygems.org/make-your-own-gem/&quot;&gt;make your own gem&lt;/a&gt; guide by the rubygems. It gives a fast tour of a typical gem’s anatomy. After getting the basics right, one can start using &lt;a href=&quot;https://github.com/technicalpickles/jeweler&quot;&gt;jeweler&lt;/a&gt;. It makes building gems super easy. Warning: if you don’t do things right way with jeweler, your commit log will look like a war zone. It happened with me.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Nov 2012 20:31:00 -0800</pubDate>
        <link>http://malav.io//2012/ruby-gem-for-sentiment-analysis-sentimentalizer/</link>
        <guid isPermaLink="true">http://malav.io//2012/ruby-gem-for-sentiment-analysis-sentimentalizer/</guid>

        <category>ruby</category>

        <category>gem</category>

        <category>machine-learning</category>

        <category>sentiment-analysis</category>


      </item>

      <item>
        <title>Rails configuration of my team ‘Where is Michael?’</title>
        <description>&lt;p&gt;In my first semester at Carnegie Mellon, my favorite course is Introduction to Software Engineering. Students are divided in the teams of five and each team is assigned one VP of Engineering. Each team is supposed to follow XP and use rails to create a web application. Only one class in the week, team coding sessions, meeting with VP and more coding. Yeah, my favorite course.&lt;/p&gt;

&lt;p&gt;What I have learnt from my previous team projects is: if you organize your team workflow and project configuration, it is easier to maintain your sanity. If you somehow manage to embed your workflow into your project configuration then you have won half the battle, seriously. Ruby, rails and the tools made available by the awesome community makes that task easier. Following are the tools that you really really should (feel free to read it as ‘must’) use if you are doing rails project.&lt;/p&gt;

&lt;h3 id=&quot;rvm&quot;&gt;RVM&lt;/h3&gt;

&lt;p&gt;If you are not using RVM, you are going to have a really bad time. In simple words, this utility manages a different version of ruby and gems for each of your project. Imagine a scenario where a team member is using ruby 1.9.2 and the others are using 1.9.3, you are going to run into some serious demo day disasters. Every team member must use rvm and the .rvmrc file must be in the version control. If you are developing using Windows (I feel sorry for you), look into Pik. That’s all you have to do to avert a demo day disaster or a late night frenzy.&lt;/p&gt;

&lt;p&gt;For quick intro to RVM: &lt;a href=&quot;http://screencasts.org/episodes/how-to-use-rvm&quot;&gt;http://screencasts.org/episodes/how-to-use-rvm&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;bundler&quot;&gt;Bundler&lt;/h3&gt;

&lt;p&gt;I don’t think anyone can dare to embark upon a Ruby or Rails journey without using Bundler. RVM will manage your gems, but it is useful to have Bundler when your gems are going to change frequently.&lt;/p&gt;

&lt;p&gt;Here is an article which explains how Bundler and RVM play together: &lt;a href=&quot;http://watirmelon.com/2011/01/17/easily-manage-your-rubies-with-rvm-bundler-and-pik/&quot;&gt;http://watirmelon.com/2011/01/17/easily-manage-your-rubies-with-rvm-bundler-and-pik/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubymine&quot;&gt;RubyMine&lt;/h3&gt;

&lt;p&gt;Our course instructors were super awesome to buy us an educational license for RubyMine. It has lots of awesome features. Here are the best ones: automatically detects the ruby version from &lt;code class=&quot;highlighter-rouge&quot;&gt;.rvmrc&lt;/code&gt; file and uses that for the project, automatically detects gems which are not installed, &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+Ctrl+R -&amp;gt; all the available rake tasks&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+Ctrl+G -&amp;gt; all the available rails generators.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That said, I still dream of the days when I will use just vim and bash or zsh. Until then, I am using IdeaVIM, which trains me to use VIM and Native Neighbourhood, which allows me to do Alt+Shift+S and get a shell. Btw, I strongly feel that RubyMine should have an inbuilt tab for shell.&lt;/p&gt;

&lt;p&gt;If you can’t get RubyMine, get Aptana Studio. It’s more eclipse-ish and easy to work with and it has inbuilt tab for shell.&lt;/p&gt;

&lt;h3 id=&quot;travis-ci&quot;&gt;Travis-ci&lt;/h3&gt;

&lt;p&gt;If you don’t have continuous integration server or don’t use it properly, you are going to die a horrible horrible death. Symptoms are questions like these “why something works on localhost but not on heroku?”, ”I know things are not working but when did they stop working? Which commit is at fault?”&lt;/p&gt;

&lt;p&gt;We have set up the Travis-ci to run all our rspec and cucumber tests on two databases sqlite and postgresql. No more why-not-working-on-heroku problems. You can find an example &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file here: &lt;a href=&quot;https://github.com/malavbhavsar/CMU-RPG/blob/master/.travis.yml&quot;&gt;https://github.com/malavbhavsar/CMU-RPG/blob/master/.travis.yml&lt;/a&gt; and the corresponding rake task here: &lt;a href=&quot;https://github.com/malavbhavsar/CMU-RPG/blob/master/.travis.yml&quot;&gt;https://github.com/malavbhavsar/CMU-RPG/blob/master/lib/tasks/travis_rspec_cucumber.rake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever someone pushes commit(s) on github, travi-ci hook detects that and runs all rspec and cucumber tests. Failed tests are mailed to the github repo owner. Set up filter and forward those emails to the team forum. Now, you can point at a person (at commit(s), if you don’t want to sound rude) and tell fix it, asap!&lt;/p&gt;

&lt;p&gt;Travis-ci badge is a standard feature of almost any repo of the gem that you are using in your project, get a similar badge for your project and show off.&lt;/p&gt;

&lt;h3 id=&quot;gemnasium&quot;&gt;Gemnasium&lt;/h3&gt;

&lt;p&gt;Gemnasium tracks your Gemfile and emails you if there is a patch, minor revision or major revision is available for a gem. Very useful, if a particular version isn’t going to provide backward-compatibility or you want to use latest features.&lt;/p&gt;

&lt;p&gt;It’s a badge, show off!&lt;/p&gt;

&lt;h3 id=&quot;code-climate&quot;&gt;Code climate&lt;/h3&gt;

&lt;p&gt;Everybody loves an A. Code climate gives A to F grades to each of your ruby file based on the complexity and duplication it has. It’s a good way to DRY out your code and get good grades!&lt;/p&gt;

&lt;p&gt;Again, it’s a badge. Show it off you must!&lt;/p&gt;

&lt;p&gt;Did I miss out anything? Are there any other awesome things out there? Please, comment!&lt;/p&gt;

&lt;p&gt;EDIT: In my recent experience, I have noticed that for people who don’t specify the exact gem versions are prone to run into errors where their test cases start to fail and there might be no apparent reason for it in the code. This can happen in a case where the new versions of the gem has arrived and travis runs your tests with new versions of gem. Solution to this problem is to use the exact gem versions. Also, if one can trigger travis to run tests when new version of any gem listed in Gemfile is released. Gemnasium should start doing this. They can just create a .gemnasium file which is updated everytime a new version of any gem listed in Gemfile is released. This will trigger travis to run the tests.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Oct 2012 10:53:00 -0700</pubDate>
        <link>http://malav.io//2012/rails-configuration-of-my-team-where-is-michael/</link>
        <guid isPermaLink="true">http://malav.io//2012/rails-configuration-of-my-team-where-is-michael/</guid>

        <category>ruby</category>

        <category>rails</category>

        <category>config</category>


      </item>

      <item>
        <title>Anami</title>
        <description>&lt;!-- TODO: Use a plugin to embed instead of doing this for every embed object  --&gt;
&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; height: auto; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/1TS4cp3c_uw/&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Instead of programming, my first post is about one of my short-films. Let alone direction and story-writing, I am terrible at acting. I am one of the guys who used to become flowers and animals in the annual drama held at school. But still, I love to do it. So, when my close friends &lt;a href=&quot;https://www.facebook.com/pranav.patadiya&quot;&gt;Pranav Patadiya&lt;/a&gt; and &lt;a href=&quot;https://www.facebook.com/pavandaxini17&quot;&gt;Pavan Daxini&lt;/a&gt; got good rapport in movie-making and drama community at DA-IICT, I asked for the roles shamelessly.&lt;/p&gt;

&lt;p&gt;‘Anami’ means ‘an entity which doesn’t have name’, we were not able to decide the name for the movie. ‘Anami’ was kind of a Crestopher Nolan movie, in which you don’t understand what’s going on till the very end of it. For first few minutes, it revolves around four guys who keep saying the same thing again and again. I am the guy who keeps saying “Kuchh dikhayi kyon nahi de raha?” (Why can’t I see anything?). It turns out at the end that all four guys are mad and have broke out of the asylum. Think twice about the tag-line that marks the end of the movie, it says something deep and it is close to my heart.&lt;/p&gt;

&lt;p&gt;I din’t have much problems while acting in this movie. Pavan jokingly says that it’s because my personality correlates with the role.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Dec 2011 04:56:00 -0800</pubDate>
        <link>http://malav.io//2011/anami/</link>
        <guid isPermaLink="true">http://malav.io//2011/anami/</guid>

        <category>short-film</category>

        <category>acting</category>


      </item>

  </channel>
</rss>
